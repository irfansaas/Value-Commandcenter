'use client';

import { useState, useMemo } from 'react';
import { Deal, DealFilters, SortOption, DealStage, Industry } from '@/lib/types';
import { sampleDeals } from '@/lib/deals';
import { filterDeals, sortDeals, calculateDealSummary, getUniqueAEs, getHealthEmoji } from '@/lib/utils';
import { DealCard } from '@/components/DealCard';
import { FilterPanel } from '@/components/FilterPanel';
import { SortSelector } from '@/components/SortSelector';
import { DealSummary } from '@/components/DealSummary';
import { DealDetailModal } from '@/components/DealDetailModal';

export default function DashboardPage() {
  const [deals] = useState<Deal[]>(sampleDeals);
  const [filters, setFilters] = useState<DealFilters>({});
  const [sortOption, setSortOption] = useState<SortOption>('dealsize-high');
  const [selectedDeal, setSelectedDeal] = useState<Deal | null>(null);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');

  // Filter and sort deals
  const filteredDeals = useMemo(() => {
    const filtered = filterDeals(deals, filters);
    return sortDeals(filtered, sortOption);
  }, [filters, sortOption]);

  const summary = useMemo(() => calculateDealSummary(filteredDeals), [filteredDeals]);

  const handleFilterChange = (newFilters: DealFilters) => {
    setFilters(newFilters);
  };

  const handleClearFilters = () => {
    setFilters({});
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">ðŸŽ¯ Nerdio VE Command Center</h1>
              <p className="text-gray-600 mt-1">Strategic Deal Management & Value Engineering Platform</p>
            </div>
            <div className="text-right">
              <p className="text-2xl font-bold text-blue-600">{filteredDeals.length}</p>
              <p className="text-sm text-gray-600">Active Deals</p>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Summary Cards */}
        <DealSummary summary={summary} />

        {/* Controls */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Filters */}
            <div className="lg:col-span-2">
              <FilterPanel
                deals={deals}
                filters={filters}
                onFilterChange={handleFilterChange}
                onClearFilters={handleClearFilters}
              />
            </div>

            {/* Sort & View Options */}
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
                <SortSelector sortOption={sortOption} onSortChange={setSortOption} />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">View</label>
                <div className="flex gap-2">
                  <button
                    onClick={() => setViewMode('grid')}
                    className={`flex-1 py-2 px-3 rounded-lg font-medium text-sm transition-colors ${
                      viewMode === 'grid'
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    Grid
                  </button>
                  <button
                    onClick={() => setViewMode('list')}
                    className={`flex-1 py-2 px-3 rounded-lg font-medium text-sm transition-colors ${
                      viewMode === 'list'
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    List
                  </button>
                </div>
              </div>

              {Object.keys(filters).length > 0 && (
                <button
                  onClick={handleClearFilters}
                  className="w-full py-2 px-3 bg-red-100 text-red-700 rounded-lg font-medium text-sm hover:bg-red-200 transition-colors"
                >
                  Clear All Filters
                </button>
              )}
            </div>
          </div>

          <div className="mt-4 text-sm text-gray-600">
            Showing <span className="font-semibold text-gray-900">{filteredDeals.length}</span> of{' '}
            <span className="font-semibold text-gray-900">{deals.length}</span> deals
          </div>
        </div>

        {/* Deals Grid/List */}
        {filteredDeals.length > 0 ? (
          <div
            className={
              viewMode === 'grid'
                ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
                : 'space-y-4'
            }
          >
            {filteredDeals.map((deal) => (
              <DealCard
                key={deal.id}
                deal={deal}
                onViewDetails={() => setSelectedDeal(deal)}
                viewMode={viewMode}
              />
            ))}
          </div>
        ) : (
          <div className="text-center py-16">
            <p className="text-gray-600 text-lg">No deals match your filters</p>
            <button
              onClick={handleClearFilters}
              className="mt-4 text-blue-600 hover:text-blue-700 font-medium"
            >
              Clear filters and try again
            </button>
          </div>
        )}
      </main>

      {/* Detail Modal */}
      {selectedDeal && <DealDetailModal deal={selectedDeal} onClose={() => setSelectedDeal(null)} />}
    </div>
  );
}
